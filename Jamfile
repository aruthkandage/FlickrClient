BINDIR = bin ;
OBJDIR = obj ;
QTDIR = /opt/Qt/5.2.1/gcc ;
QTBINDIR = $(QTDIR)/bin ;

INCDIRS = 
include
/usr/include
$(QTDIR)/include
$(QTDIR)/include/QtCore
$(QTDIR)/include/QtGui
$(QTDIR)/include/QtNetwork
$(QTDIR)/include/QtSql
$(QTDIR)/include/QtWidgets
;

SRCDIRS =
src
src/moc
src/test
;

MOCDIR =
src/moc
;

LIBDIRS = 
lib
/usr/lib 
$(QTDIR)/lib
;

CC = gcc ;
C++ = g++ ;
MOC = $(QTBINDIR)/moc ;
LINK = g++ ;

LINKLIBDIRS = -L$(LIBDIRS) ;

rule get {
    return $(1) ;
}

rule set_libs {
    LINKLIBS on $(1) = -l$(2) ;
}

# $(1) => .cpp file
rule compile {
    local _obj ;

    _obj = $(1:S=.o) ;

    Depends $(_obj) : $(1) ;
    Object $(_obj) : $(1) ;

    SEARCH on $(1) = $(SRCDIRS) ;
    HDRSEARCH on $(1) = $(INCDIRS) ;
    CCHDRS on $(_obj) = [ FIncludes $(INCDIRS) [ on $(1) get $(INCDIRS) ]  ] ;
    C++FLAGS on $(_obj) += [ on $(1) get $(C++FLAGS) ] ;

    # Needed by Qt
    C++FLAGS on $(_obj) += -fPIC ;

    if $(DEBUG) {
        C++FLAGS on $(_obj) += -g ;
    } else {
        CCDEFS on $(_obj) += [ FDefines NDEBUG ] ;
        CCDEFS on $(_obj) += [ FDefines QT_NO_DEBUG ] ;
        CCDEFS on $(_obj) += [ FDefines QT_NO_DEBUG_OUTPUT ] ;
        CCDEFS on $(_obj) += [ FDefines QT_NO_WARNING_OUTPUT ] ;
    }

	MakeLocate $(_obj) : $(OBJDIR) ;
}

actions generate_moc {
    $(MOC) -I$(INCDIRS) -o $(1) $(2)
}

# $(1) => .cpp file (becomes moc_$(1).cpp)
rule compile_qt {
    local _mocsrc ;
    local _hdr ;
    local _mocobj ;

    _mocsrc = moc_$(1) ;
    _hdr = $(1:S=.h) ;
    _mocobj = $(_mocsrc:S=.o) ;

    Depends $(_mocobj) : $(_mocsrc) ;
    Depends $(_mocsrc) : $(_hdr) ;
    Clean clean : $(_mocsrc) ;

    LOCATE on $(_mocsrc) = $(MOCDIR) ;
    LOCATE on $(_hdr) = $(INCDIRS) ;
    SEARCH on $(_hdr) = $(INCDIRS) ;

    generate_moc $(_mocsrc) : $(_hdr) ;
    compile $(_mocsrc) ;
    compile $(1) ;
}

rule executable_sources {
	local _src ;

    OBJECTS on $(1) += $(2:S=.o) ;
    Depends $(1) : $(2:S=.o) ;  
	for _src in $(2)
	{
        compile $(_src) ;
	}	
}

rule executable_qt_sources {
    local _src ;
    local _objs ;
    local _moc_objs ;

    _objs = $(2:S=.o) ;
    _moc_objs = $(_objs) ;
    _moc_objs = moc_$(_moc_objs) ;
    
    OBJECTS on $(1) += $(_objs) ;
    MOC_OBJECTS on $(1) += $(_moc_objs) ;
    Depends $(1) : $(_objs) ;
    Depends $(1) : $(_moc_objs) ;

    for _src in $(2)
    {
        compile_qt $(_src) ;
    }
}

rule executable {
    local _exe_objs ;

    _exe_objs = [ on $(1) get $(OBJECTS) ] ;
    _exe_objs += [ on $(1) get $(MOC_OBJECTS) ] ;

	Clean clean : $(1) ; 
	LOCATE on $(1) = $(BINDIR) ;
	link_executable $(1) : $(_exe_objs) ;
}

actions link_executable {
	$(LINK) -o $(1:D=$(LOCATE)) $(2:D=$(OBJDIR)) $(LINKLIBDIRS) $(LINKLIBS) ;
}

executable_qt_sources flickr_request_test : flickr_request.cpp flickr_oauth.cpp ;
executable_sources flickr_request_test : flickr_api_key.cpp flickr_request_test.cpp hmac.cpp ;
executable flickr_request_test ;
set_libs flickr_request_test : Qt5Core Qt5Network ; 

executable_sources hmac_test : hmac_test.cpp hmac.cpp ;
executable hmac_test ;
set_libs hmac_test : Qt5Core ; 
